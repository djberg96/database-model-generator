# Example of enhanced model generation with index recommendations
# Generated by Oracle Model Generator v0.5.0
# Table: EMPLOYEES
# Generated on: 2024-12-19 11:00:00

require 'securerandom' if defined?(SecureRandom)

class Employee < ActiveRecord::Base
  set_table_name "employees"

  set_primary_key :employee_id

  # Recommended Indexes (add these to your database migration):
  # These indexes would improve query performance for this model

  # add_index :employees, :department_id  # Foreign key index for department_id
  # add_index :employees, :manager_id  # Foreign key index for manager_id
  # add_index :employees, :job_id  # Foreign key index for job_id
  # add_index :employees, :email, unique: true  # Unique constraint for email
  # add_index :employees, :hire_date  # Date queries for hire_date
  # add_index :employees, [:department_id, :hire_date]  # Composite index for filtering by department_id and hire_date
  # Consider adding a full-text search index for first_name, last_name:
  # Oracle: CREATE INDEX idx_employees_name_text ON EMPLOYEES (FIRST_NAME, LAST_NAME) INDEXTYPE IS CTXSYS.CONTEXT

  # Table relationships

  belongs_to :department, foreign_key: :department_id, optional: true
  belongs_to :manager, class_name: 'Employee', foreign_key: :manager_id, optional: true
  belongs_to :job, foreign_key: :job_id, optional: true

  # Enhanced relationships based on dependencies
  has_many :subordinates, class_name: 'Employee', foreign_key: :manager_id
  has_many :job_history_records, foreign_key: :employee_id

  # Scopes
  scope :active, -> { where.not(hire_date: nil) }
  scope :with_commission, -> { where.not(commission_pct: nil) }
  scope :recent_hires, -> { where('hire_date > ?', 1.year.ago) }
  scope :high_earners, -> { where('salary > ?', 50000) }

  # Validations
  validates :employee_id, presence: true, uniqueness: true
  validates :first_name, presence: true, length: { maximum: 20 }
  validates :last_name, presence: true, length: { maximum: 25 }
  validates :email, presence: true, length: { maximum: 25 }, uniqueness: true
  validates :hire_date, presence: true
  validates :job_id, presence: true, length: { maximum: 10 }
  validates :salary, numericality: { greater_than: 0 }, allow_nil: true
  validates :commission_pct, numericality: { greater_than_or_equal_to: 0, less_than_or_equal_to: 1 }, allow_nil: true

  # Class Methods
  def self.search(query)
    return all if query.blank?
    where("FIRST_NAME LIKE ? OR LAST_NAME LIKE ? OR EMAIL LIKE ?", "%#{query}%", "%#{query}%", "%#{query}%")
  end

  def self.by_name
    order(:first_name, :last_name)
  end

  def self.recent
    order(hire_date: :desc)
  end

  # Instance Methods
  def to_s
    "#{first_name} #{last_name}" || "#{self.class.name} #{id}"
  end

  def full_name
    "#{first_name} #{last_name}".strip
  end

  def annual_compensation
    base = salary || 0
    commission = commission_pct ? base * commission_pct : 0
    base + commission
  end
end
