#!/usr/bin/env ruby

# Demo script showing SQL Server support in the Database Model Generator

puts "Database Model Generator - SQL Server Support Demo"
puts "=" * 55

puts "\nThis enhanced generator now supports both Oracle and SQL Server databases!"

puts "\nSupported Databases:"
puts "=" * 20
puts "✅ Oracle Database (11g, 12c, 18c, 19c, 21c)"
puts "   - Uses OCI8 gem for connectivity"
puts "   - Full schema introspection"
puts "   - Oracle Text indexes for full-text search"
puts
puts "✅ Microsoft SQL Server (2012, 2014, 2016, 2017, 2019, 2022)"
puts "   - Uses TinyTDS gem for connectivity"
puts "   - INFORMATION_SCHEMA queries"
puts "   - Full-text search indexes"

puts "\nConnection Examples:"
puts "=" * 20

puts "\n1. Oracle Database:"
puts "   ./bin/omg -T oracle -d localhost:1521/XE -u hr -p hr -t employees"
puts "   ./bin/omg -d localhost:1521/XE -u scott -p tiger -t users  # Auto-detects Oracle"

puts "\n2. SQL Server:"
puts "   ./bin/omg -T sqlserver -s localhost -P 1433 -d northwind -u sa -p password -t employees"
puts "   ./bin/omg -s localhost -d adventureworks -u user -p pass -t customers  # Auto-detects SQL Server"

puts "\nKey Features for Both Databases:"
puts "=" * 35

features = [
  "🔍 Schema Introspection - Analyzes table structure automatically",
  "🔗 Relationship Detection - Finds foreign keys and associations",
  "📊 Index Recommendations - Suggests performance optimizations",
  "✅ ActiveRecord Validations - Generates Rails-compatible models",
  "🧪 Test Generation - Supports RSpec, TestUnit, and Minitest",
  "📈 Scopes & Methods - Adds useful query scopes and helper methods",
  "🎯 Enum Support - Detects and generates enum definitions",
  "📝 Full Documentation - Comments and metadata in generated code"
]

features.each { |feature| puts "   #{feature}" }

puts "\nSQL Server Specific Features:"
puts "=" * 30
puts "   📄 INFORMATION_SCHEMA queries for portability"
puts "   🔍 Full-text search with SQL Server indexes"
puts "   🏷️  SQL Server data type mapping"
puts "   📊 Composite indexes for performance"
puts "   🔐 Integrated Security support (Windows Auth)"

puts "\nOracle Specific Features:"
puts "=" * 25
puts "   🏛️  USER_* dictionary views for schema info"
puts "   📖 Oracle Text (CTXSYS.CONTEXT) indexes"
puts "   🎯 Oracle-specific data types (VARCHAR2, NUMBER, etc.)"
puts "   📈 Partitioned index recommendations"
puts "   🔗 Advanced constraint analysis"

puts "\nSample Generated Model (SQL Server):"
puts "=" * 37

sql_server_model = <<~MODEL
  # Generated by Database Model Generator v#{DatabaseModel::Generator::VERSION rescue '0.6.0'}
  # Database: SQL Server
  # Table: Employees

  class Employee < ActiveRecord::Base
    set_table_name "Employees"
    set_primary_key :EmployeeID

    # Recommended Indexes:
    # add_index :employees, :DepartmentID  # Foreign key index
    # add_index :employees, :Email, unique: true  # Unique constraint
    # add_index :employees, :HireDate  # Date queries
    # add_index :employees, [:DepartmentID, :HireDate]  # Composite index

    # Relationships
    belongs_to :department, foreign_key: :DepartmentID
    belongs_to :manager, class_name: 'Employee', foreign_key: :ManagerID
    has_many :subordinates, class_name: 'Employee', foreign_key: :ManagerID

    # Validations
    validates :FirstName, presence: true, length: { maximum: 50 }
    validates :LastName, presence: true, length: { maximum: 50 }
    validates :Email, presence: true, uniqueness: true
    validates :HireDate, presence: true
    validates :Salary, numericality: { greater_than: 0 }

    # Scopes
    scope :active, -> { where(Status: 'Active') }
    scope :recent_hires, -> { where('HireDate > ?', 30.days.ago) }

    # Methods
    def full_name
      "\#{FirstName} \#{LastName}".strip
    end
  end
MODEL

puts sql_server_model

puts "\nMigration Examples:"
puts "=" * 18

puts "\nGenerate Rails migration for SQL Server indexes:"
puts <<~MIGRATION
  class AddIndexesToEmployees < ActiveRecord::Migration[7.0]
    def change
      # Foreign key indexes
      add_index :employees, :DepartmentID
      add_index :employees, :ManagerID

      # Unique constraints
      add_index :employees, :Email, unique: true

      # Date optimization
      add_index :employees, :HireDate

      # Composite indexes
      add_index :employees, [:DepartmentID, :HireDate]

      # Full-text search (SQL Server)
      execute "CREATE FULLTEXT INDEX ON Employees (FirstName, LastName) KEY INDEX PK_Employees"
    end
  end
MIGRATION

puts "\nGetting Started:"
puts "=" * 16
puts "1. Install required gems:"
puts "   gem install oci8        # For Oracle support"
puts "   gem install tiny_tds    # For SQL Server support"
puts
puts "2. Test connection:"
puts "   ./bin/omg --help"
puts
puts "3. Generate your first model:"
puts "   ./bin/omg -T sqlserver -s myserver -d mydb -u user -p pass -t mytable"
puts
puts "4. View index recommendations only:"
puts "   ./bin/omg -T sqlserver -s myserver -d mydb -u user -p pass -t mytable --indexes"

puts "\n" + "=" * 55
puts "Ready to generate models for both Oracle and SQL Server! 🚀"
