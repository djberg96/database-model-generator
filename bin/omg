#!/usr/bin/env ruby

require 'oracle/model/generator'
require 'getopt/long'

begin
  require 'dbi/dbrc'
rescue LoadError
  # Do nothing. Users must specify username/password information on the
  # command line via the -u and -p options.
end

opts = Getopt::Long.getopts(

  ['--help',     '-h'],
  ['--table',    '-t', Getopt::REQUIRED],
  ['--view',     '-v', Getopt::REQUIRED],
  ['--user',     '-u', Getopt::REQUIRED],
  ['--password', '-p', Getopt::REQUIRED],
  ['--database', '-d', Getopt::REQUIRED],
  ['--output',   '-o', Getopt::REQUIRED],
  ['--rails',    '-r', Getopt::REQUIRED],
  ['--tests',    '-x', Getopt::OPTIONAL],
  ['--class',    '-c', Getopt::OPTIONAL]
)

def help
  version = Oracle::Model::Generator::VERSION
  %Q{
    Available options for the Oracle Model Generator (version #{version}) are:

    -h, --help     => Display the help text you're looking at now.
    -t, --table    => The name of the table you wish to model.
    -v, --view     => The name of the view you wish to model.
    -o, --output   => The name of the file to create.
    -u, --user     => The user used to establish a connection to the database.
    -p, --password => The password used to establish a connection to the database.
    -r, --rails    => The version of rails you're using (2 or 3).
    -x, --tests    => Generate tests (the default).
    -c, --class    => Class name for the generated table (optional)

    If no user or password are supplied, then OMG will attempt to glean that
    information using a combination of the database name and your .dbrc file.
    If that cannot be found, then an error is raised.

    If no output file is supplied then the file generated will match the name
    of the table, minus the 's' if present, with a .rb extension. This is lazy,
    but it is orders of magnitude easier for you to rename a file than it is
    for me to deal with all possible permutations. Note that the output file
    name is also used as the basis for the class name

    If no tests option is specified then a test file, using test-unit 2, will
    be generated that includes some basic tests to backup the builtin
    validations. Legal options are 'testunit', 'rspec', or 'none'.

    Examples:

    # Create a User model for the users table (rails 3)
    omg -d some_database -u scott -p tiger -t users

    # Create a User model for the users table (rails 2)
    omg -d some_database -r 2 -u scott -p tiger -t users

    # Same thing, using dbi-dbrc behind the scenes
    omg -d some_database -t users

    # Create a Lily model for the lilies table, and specify the output file.
    omg -d some_database -u scott -p tiger -t lilies -o lily.rb
  }
end

if opts['h']
  puts help
  exit!
end

unless opts['database']
  puts "You must specify a database."
  exit!
end

unless opts['table'] || opts['view']
  puts "You must specify a table or view."
  exit!
end

user = opts['user']
pass = opts['password']

unless user && pass
  begin
    dbrc = DBI::DBRC.new(opts['database'], user)
    user = dbrc.user
    pass = dbrc.passwd
  rescue NameError
    msg = "If you do not specify a username or password on the command line "
    msg << "then you must use the dbi-dbrc library and create a .dbrc file in "
    msg << "your home directory."
    puts msg
    exit!
  rescue DBI::DBRC::Error
    msg = "No user or password provided, and no dbrc entry found for '"
    msg << opts['database'] + "'."
    puts msg
    exit!
  end
end

table = opts['table']
view  = opts['view']

if table && view
  puts "You cannot specify both a table and a view."
  exit!
end

connection = OCI8.new(user, pass, opts['database'])
omg = Oracle::Model::Generator.new(connection)
omg.generate(table || view, view)

ofile = opts['o']

unless ofile
  ofile = omg.table.downcase
  ofile.chop! if ofile[-1].chr.upcase == 'S'
  ofile += '.rb'
end

# Default to Rails 3
rails = (opts['rails'] && opts['rails'].to_i) || 3

if rails < 2 || rails > 3
  puts "Invalid version of Rails. Specify either 2 or 3."
  exit!
end
  
omg.instance_eval { @model = opts['class'] } if opts['class'] # dirty fix

File.open(ofile, 'w') do |fh|
  fh.puts "class #{omg.model} < ActiveRecord::Base"
  fh.puts "  set_table_name :\"#{table}\""

  if omg.primary_keys.size > 1
    fh.puts "\n  # Requires the composite-primary-keys library"
    fh.puts "  set_primary_keys " + omg.primary_keys.inspect
  else
    fh.puts "\n  set_primary_key " + omg.primary_keys.first.to_sym.inspect unless omg.primary_keys.first.nil?
  end

  fh.puts "\n  # Table relationships\n\n"
  omg.belongs_to.uniq.each{ |table|
    fh.puts "  belongs_to :#{table.downcase}"
  }

  fh.puts "\n  # Validations\n"

  if rails == 2
    # Character fields, size
    omg.column_info.each{ |col|
      data_type = col.data_type.to_s
      if ['char', 'varchar', 'varchar2'].include?(data_type)
        validation = "validates_size_of :#{col.name.downcase}, :maximum => #{col.data_size}"
        validation << ", :allow_blank => #{col.nullable?}" if col.nullable?
        fh.puts "  #{validation}"
      end
    }

    fh.puts # Line break

    # Fields that must be present
    omg.column_info.each{ |col|
      unless col.nullable?
        validation = "validates_presence_of :#{col.name.downcase}"
        fh.puts "  #{validation}"
      end
    }

    fh.puts # Line break

    # Numeric fields
    omg.column_info.each{ |col|
      if col.data_type.to_s == 'number'
        max = ("9" * (col.precision - col.scale)).to_i

        validation = "validates_numericality_of :#{col.name.downcase}"
        validation << ", :less_than => #{max + 1}, :greater_than => -#{max + 1}"

        if col.scale == 0
          validation << ", :only_integer => true"
        end

        fh.puts "  #{validation}"
      end
    }
  else
    # Character fields, size
    omg.column_info.each{ |col|

      data_type = col.data_type.to_s

      case data_type
        when 'char', 'varchar', 'varchar2'
          validation = "validates :#{col.name.downcase}, "
          validation << ":length => {:maximum => #{col.data_size}}"

          format_str = ",\n    :format => { :with => /[:alpha]/, :message => 'is not a string'"

          if col.nullable?
            format_str += ", :if => :#{col.name.downcase}? }"
          else
            format_str += " }"
          end

          validation << format_str
          validation << ",\n    :presence => #{!col.nullable?}" unless col.nullable?
          validation << "\n\n"
        when 'number'
          max = "9" * col.precision
          max.insert(col.precision - col.scale, ".") if col.scale > 0

          validation = "\n  validates :#{col.name.downcase}"

          unless col.nullable?
            validation << ", :presence => #{!col.nullable?}"
          end

          unless max.empty?
            validation << ", :numericality => {"
            validation << "\n    :less_than_or_equal_to => #{max}, " 
            validation << "\n    :greater_than_or_equal_to => -#{max}" 

            if col.scale == 0
              validation << ",\n    :only_integer => true"
            end

            validation << "\n  }\n\n"
          end

      end

      fh.puts "  #{validation}"
    }
  end

  fh.puts # Line break
  header_printed = false

  # Date fields
  omg.column_info.each{ |col|
    data_type = col.data_type.to_s

    if ['date', 'time'].include?(data_type)
      if data_type == 'date'
        validation = "validates_date :#{col.name.downcase}"
      end

      if data_type == 'timestamp'
        validation = "validates_time :#{col.name.downcase}"
      end

      unless header_printed
        fh.puts "  # Requires the validates_timeliness library"
      end

      fh.puts "  #{validation}"
    end
  }

  fh.puts "end"
end

if opts['x'].nil? || opts['x'] == 'testunit'
  test_file = "test_#{ofile}"
  File.open(test_file, "w") do |fh|
    setup_var = omg.table.downcase
    setup_var.chop! if setup_var[-1].chr.downcase == 's'  
    instance_var = "@#{setup_var}"

    # This bit is necessary to force test-unit 2 instead of using the library
    # that ships as part of the Ruby standard library.
    fh.puts "require 'rubygems'"
    fh.puts "gem 'test-unit'"
    fh.puts "require 'test/unit'\n\n"

    fh.puts "class TC_#{omg.model} < Test::Unit::TestCase\n"
    fh.puts "  def setup"
    fh.puts "    #{instance_var} = #{omg.model}.new"
    fh.puts "  end\n\n"

    fh.puts "  test 'table name is #{omg.table.downcase}' do"
    fh.puts "    assert_equal('#{omg.table.downcase}', #{omg.model}.table_name)"
    fh.puts "  end\n\n"

    if omg.primary_keys.size > 1
      test_string = "  test 'primary keys are #{omg.primary_keys.join(', ')}' do"
      fh.puts test_string
      fh.puts "    assert_equal('#{omg.primary_keys.join(', ')}', #{omg.model}.primary_keys)"
    else
      test_string = "  test 'primary key is #{omg.primary_keys.first}' do"
      fh.puts test_string
      fh.puts "    assert_equal('#{omg.primary_keys.first}', #{omg.model}.primary_key)"
    end

    fh.puts "  end\n"

    omg.column_info.each{ |col|
      data_type = col.data_type.to_s
      column    = col.name.downcase

      fh.puts "\n  test '#{column} basic functionality' do"
      fh.puts "    assert_respond_to(#{instance_var}, :#{column})"
      fh.puts "    assert_nothing_raised{ #{instance_var}.#{column} }"

      case data_type
        when 'char', 'varchar', 'varchar2'
          if col.nullable?
            fh.puts "    assert_kind_of([NilClass, String], #{instance_var}.#{column})"
          else
            fh.puts "    assert_kind_of(String, #{instance_var}.#{column})"
          end
        when 'number'
          if col.nullable?
            fh.puts "    assert_kind_of([NilClass, Numeric], #{instance_var}.#{column})"
          else
            fh.puts "    assert_kind_of(Numeric, #{instance_var}.#{column})"
          end
        when 'date'
          if col.nullable?
            fh.puts "    assert_kind_of([NilClass, DateTime, Time], #{instance_var}.#{column})"
          else
            fh.puts "    assert_kind_of([DateTime, Time], #{instance_var}.#{column})"
          end
      end

      fh.puts "  end\n"

      case data_type
        when 'char', 'varchar', 'varchar2'
          test_title = "\n  test '#{column} must be a string"
          test_title += " if present" if col.nullable?
          test_title += "' do"

          fh.puts test_title
          fh.puts "    #{instance_var}.#{column} = #{rand(100)}"
          fh.puts "    assert_false(#{instance_var}.valid?)"
          fh.puts "    assert_true(#{instance_var}.errors[:#{column}].include?('is not a string'))"
          fh.puts "  end\n"

          max_len = col.data_size
          err_msg = "is too long (maximum is #{max_len} characters)"

          fh.puts "\n  test '#{column} cannot exceed #{max_len} characters' do"
          fh.puts "    #{instance_var}.#{column} = 'a' * #{max_len + 1}"
          fh.puts "    assert_false(#{instance_var}.valid?)"
          fh.puts "    assert_true(#{instance_var}.errors[:#{column}].include?('#{err_msg}'))"
          fh.puts "  end\n"
        when 'number'
          test_title = "\n  test '#{column} must be a number"
          test_title += " if present" if col.nullable?
          test_title += "' do"

          fh.puts test_title
          fh.puts "    #{instance_var}.#{column} = 'test_string'"
          fh.puts "    assert_false(#{instance_var}.valid?)"
          fh.puts "    assert_true(#{instance_var}.errors[:#{column}].include?('is not a number'))"
          fh.puts "  end\n"

          max = "9" * col.precision
          max.insert(col.precision - col.scale, ".") if col.scale > 0
          err_msg = "must be less than or equal to #{max}"

          fh.puts "\n  test '#{column} cannot exceed the value #{max}' do"

          if col.scale > 0
            fh.puts "    #{instance_var}.#{column} = #{max.to_f.round}"
          else
            fh.puts "    #{instance_var}.#{column} = #{max.to_i + 1}"
          end

          fh.puts "    assert_false(#{instance_var}.valid?)"
          fh.puts "    assert_true(#{instance_var}.errors[:#{column}].include?('#{err_msg}'))"
          fh.puts "  end\n"

          err_msg = "must be greater than or equal to -#{max}"

          fh.puts "\n  test '#{column} cannot be less than the value -#{max}' do"

          if col.scale > 0
            fh.puts "    #{instance_var}.#{column} = -#{max.to_f.round}"
          else
            fh.puts "    #{instance_var}.#{column} = -#{max.to_i + 1}"
          end

          fh.puts "    assert_false(#{instance_var}.valid?)"
          fh.puts "    assert_true(#{instance_var}.errors[:#{column}].include?('#{err_msg}'))"
          fh.puts "  end\n"
      end

      unless col.nullable?
        err_msg = "can't be blank"
        fh.puts "\n  test '#{column} cannot be nil' do"
          fh.puts "    #{instance_var}.#{column} = nil"
          fh.puts "    assert_false(#{instance_var}.valid?)"
          fh.puts "    assert_true(#{instance_var}.errors[:#{column}].include?(\"#{err_msg}\"))"
        fh.puts "  end\n"
      end
    }

    fh.puts "\n  def teardown"
    fh.puts "     @#{setup_var} = nil"
    fh.puts "  end"

    fh.puts "end"
  end
  puts "\nTest file '#{test_file}' generated\n"
else
  if opts['x'] == 'rspec'
    puts "\nrspec not yet supported for generating tests.\n"
  elsif opts['x'] != 'none'
    puts "\nInvalid option to -x/--tests: " + opts['x']
  else
    puts "\nSkipping test file genertion.\n"
  end 
end

omg.connection.logoff if omg.connection

puts "\nFile '#{ofile}' generated\n\n"
