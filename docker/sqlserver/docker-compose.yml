services:
  sqlserver:
    build:
      context: ../../
      dockerfile: docker/sqlserver/Dockerfile
    container_name: omg_sqlserver
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Passw0rd
      - MSSQL_PID=Express
    volumes:
      - sqlserver_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - omg_network

  # Optional: Add a container to test the generator
  omg_test:
    build:
      context: ../../
      dockerfile: docker/test/Dockerfile
    container_name: omg_test_runner
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - ../../:/app
      - /app/vendor
    working_dir: /app
    environment:
      - SQLSERVER_HOST=sqlserver
      - SQLSERVER_PORT=1433
      - SQLSERVER_USERNAME=sa
      - SQLSERVER_PASSWORD=YourStrong!Passw0rd
      - SQLSERVER_DATABASE=test_db
    networks:
      - omg_network
    command: ["./docker/test/run_tests.sh"]

volumes:
  sqlserver_data:

networks:
  omg_network:
    driver: bridge
